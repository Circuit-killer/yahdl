/**
 * Standard queue interface.  Follows strict first-in, first-out ordering.
 */
interface queue <
    type T
> {
    /// Removes and returns next item.  Blocks until something is available.
    public T get();
    
    /// Returns true if an item is available.
    public bool has_item();
    
    /// Inserts an item into the fifo.  Blocks until space is available.
    public void put(T item);
    
    /// Returns true if space is available.
    public bool has_space();
}

module circular_buffer <type T, uint32_t capacity> implements queue<T> {
    private T data[capacity];
    private uint32_t put_ptr;
    private uint32_t get_ptr;
    private uint32_t size;

    public T get() {
        wait until has_item();
        
        T value = data[get_ptr];
        size = size - 1;
        get_ptr = (get_ptr + 1) % capacity;            
        return value;
    }

    public bool has_item() {
        return size > 0;
    }

    public void put(T item) {
        wait until has_space();
        
        data[put_ptr] = item;
        put_ptr = (put_ptr + 1) % capacity;
        size = size + 1;
    }

    public bool has_space() {
        return size < capacity;
    }
}
