grammar Hardware;

@header {
    package hw.lang.parser;
}




////////////////////////////////////////////////////////////////////////////////  
////////////////////////////////////////////////////////////////////////////////
//
// Grammar
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

compilationUnit
    : packageDecl moduleDef 
    ;
  
packageDecl
    : 'package' name+=ID ('.' name+=ID)* ';'
    ;



////////////////////////////////////////////////////////////////////////////////
// Modules
////////////////////////////////////////////////////////////////////////////////

moduleDef
    : 'module' name=ID portDeclList? moduleBody
    ;


////////////////////////////////////////
// Port List

portDeclList
    : '(' (ports+=portDecl (',' ports+=portDecl)*)? ')'
    ;

portDecl
    : portDir dataType packedSize? ID
    ;

portDir
    : 'input'
    | 'output'
    | 'inout' 
    ;

dataType
    : 'logic'
    ;

packedSize
    : '[' msb=INT ':' lsb=INT ']'
    ;


////////////////////////////////////////
// Module Body

moduleBody
    : '{' '}'
    ;




////////////////////////////////////////////////////////////////////////////////  
////////////////////////////////////////////////////////////////////////////////
//
// Tokens
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

INT
    : [0-9]+
    ;

ID
    : [a-zA-Z_][a-zA-Z0-9_]*
    ;

WS
    : [ \t\r\n]+ -> skip
    ;

COMMENT
    : '/*' .*? '*/' -> skip
    ;

LINE_COMMENT
    : '//' ~[\r\n]* -> skip
    ;